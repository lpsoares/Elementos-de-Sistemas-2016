// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

    static boolean black;
    static Array screen;
    static int width;
    static int height;
    static Array bits;

    /** Initializes the Screen. */
    function void init() {
        let black = true;
        let width = 512;
        let height = 256;

        let bits = Array.new(16); 
        let bits[0] = 1;
        let bits[1] = 2;
        let bits[2] = 4;
        let bits[3] = 8;
        let bits[4] = 16;
        let bits[5] = 32;
        let bits[6] = 64;
        let bits[7] = 128;
        let bits[8] = 256;
        let bits[9] = 512;
        let bits[10] = 1024;
        let bits[11] = 2048;
        let bits[12] = 4096;
        let bits[13] = 8192;
        let bits[14] = 16384;
        let bits[15] = 16384 + 16384;

        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        do Screen.setColor(true);

        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int x;
        var int y;
        var int mask;
        var int address;
        var int value;


        let address = (y*32) + (x/16);
        let mask = x - ((x/16)*16);

        let value = Memory.peek(address);

        if(black) {
            let value = value | bits[mask];
        } else {
            let value = value & ~bits[mask];
        } 

        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
         var int dx;
         var int dy;
         var int ax;
         var int a;

         if (y1 > y2){
         do Screen.drawLine(x2,y2,x1,y1);

         return;
         }

         let dx = x2 - x1;
         let ax = -1;

         if (dx < 0) {
            let ax = -1;
            let dx = -dx;

         }

         if (dx = 0){
            let a = x1;
            while(~(a=x2)){
                do Screen.drawPixel(a,y1);
                let a = a + ax;
            
        }
        return;

    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

              
        return;
        }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        return;
    }
}
